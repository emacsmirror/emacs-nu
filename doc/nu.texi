\input texinfo @c -*-texinfo*-*
@setfilename nu.info
@documentencoding ISO-8859-1
@include version.texi
@settitle Nu-mode manual
@include macros.texi


@copying
This manual is for Nu (version @value{VERSION} of @value{UPDATED}),
a modern keybinding for Emacs.
Copyright @copyright{} 2014 @authors{}.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation

@end copying

@dircategory Emacs
@direntry
* Nu: (nu). Modern keybinding for Emacs.
@end direntry


@titlepage
@title Nu
@subtitle Modern keybinding for Emacs
@author @authors()
@page
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Nu

This is the manual for Nu, a modern keybinding for Emacs.
@end ifnottex

@menu
* Overview::
* NU for the power user::
* View and Edit::
* Files Buffers Windows::
* Hacking::
* NU & other libraries::
* GNU Free Documentation License::
@end menu

@node Overview
@chapter Overview

``Nu `` is a modern keybinding for Emacs.

nu-mode is a global minor mode, its keymap,
and the commands which are not provided in raw Emacs.

Modern, means respecting conventions like
@enumerate
@item @kbd{Control-f} to find
@item @kbd{Control-r} to replace
@item @kbd{Control-s} to save
@item @kbd{Control-x}, @kbd{Control-c}, @kbd{Control-v} to cut, copy, paste.
@end enumerate

To allow user to leverage large panel of functions, nu-mode relies on prompts. For example, @kbd{Control-f} raises a prompt precising which key - actually, which sequence - to press in order to execute desired function : once @kbd{Control-f} has been pressed and the ``Find-prompt'' appears, pressing @key{f} will start a regexp search, while @kbd{g} will execute goto-line, or @kbd{s} will move point to previous selection.

Inverse is sometimes true : since @kbd{Control+s} invoking a prompt would be irritating, this sequence directly saves buffer, while @kbd{Alt+s} runs the ``save prompt''.

nu-emacs does not only provides nu-mode. There are also two independant parts
@enumerate
@item nu-alias is a simple mechanism to define aliases into org-mode file(s). This way its easier to maintain aliases to be invoked from Mx. See its REAME.
@item dhammacakka is a light set of customization. See its README.
@end enumerate


@section Dependencies
Nu depends on several libraries, both native or external ones :
@enumerate
@item help-fns+
@item undo-tree
@item ace-jump
@item recentf
@item cua-selection-mode
@item magit is optional
@end enumerate


@section Help

Use @kbd{Control-q} to quit a sequence or a command in progress.
Use @kbd{Alt+z} to undo last command.
Use @kbd{Control+h} to gain access to help functions. This includes the usual shortcuts to describe what a key does, or what a function does.
If you messed up, use @kbd{Control+w} then @kbd{Control+q} to quit.

Prompts are usually triggered using a @kbd{Control} modifier and advertise a function using the same key, but with @kbd{Alt} modifier. For example, @kbd{Control-f} will pop-up a find-prompt, while @kbd{Alt-f} will directly allow you to `ace-jump` to a char.

These prompts offer you to quickly learn where functions are.

@node NU for the power user
@chapter NU for the power user

If you are not used to Emacs, reading this chapter is not necessary. But Emacs veteran should probably start here.
emacs-nu redefines many keys, however two points make learning curve shorter

@enumerate
@item For any user, knowing CUA keybinds will make emacs-nu discoverable.
@item For veteran Emacs user, two important sequences remain:
@end enumerate

@kbd{M-x} is still there. This means, you can probably obtain what you want.
Also, @kbd{Control+h} for help-prefix is still there.

Now, three things should probably be kept in mind while trying nu-mode

@enumerate
@item
To repeat a command, use @kbd{Alt+Space}.
@item
To trigger a major mode sequence, start with @kbd{Control+Space}. This will invoke vanilla emacs @kbd{Control+c}. For example, into org-mode, use @kbd{Control+Space Control+n} to navigate to next node. If you already defined you own keys starting with @kbd{Control+c}, do not amend this definition.

@lisp
(define-key mykeymap kbd("\C-c h") myfunction)
@end lisp

To invoke above myfunction example, press @kbd{Control-SPC h}.

@item
You should not rely on @kbd{Control+x}, or at least no regularly. However to trigger x prefix, use @kbd{Control+Alt+Space}.

@end enumerate


Note that `where-is` function, which sometimes advertises shortcuts, will not really work, since a prompt is not a keymap : `where-is` do not know how to invoke @kbd{Control-f} then @kbd{k} to reach end of buffer. (Did you try where-is git push in magit?)

Thus :
@enumerate
@item
For each function accessible from a prompt, an additional shortcut is created, accessible from @kbd{menu} plus the same @kbd{key} than the prompt, in order to make where-is advertise. Hence, if you read `You can run this command with <menu> f k`, please understand, despite it is also true, that you can also run the command with @kbd{Control-f-k}.
@item
From the help prompt (@kbd{Control-h}), run @key{h} to invoke nu-help. This function will present you all prompts, and will offer you to describe their keymaps - that is, all the functions you can access from these prompts.
@end enumerate

@node View and Edit
@chapter View and Edit

Obviously just type keys to input text. With slight notes : @kbd{Alt+m} to carriage return + indent. Use @kbd{Alt+v} + c to insert literally a character.

@section Navigate

While arrows still work, Nu uses @key{Alt} key to navigate.
Hence, the thumb often presses @key{Alt} key, while pinky finger remains safe.
Navigate up left right down using @key{Alt} and :


@w{    }I@*
@w{     }J@w{ }K@w{ }L


Additionally, use @key{Alt} @key{u} and @key{Alt} @key{o} to move to previous, next word.

@w{  }U@w{ }I@w{ }O@*
@w{     }J@w{ }K@w{ }L


Use @kbd{Alt+$} to go to end of line, or @kbd{Alt+h} to go beginning of line. To reach a line or a specific character, or the beginning of buffer, or the end of the buffer, use @kbd{Control+f} then the appropriate key. Just read the prompt. Or use @kbd{Alt+f} if you just want to find-char.

Notice that f key, used both with `control' and `alt' modifiers, offers find-related features. One of these keys is direct : it directly executes a command, & maybe a very common one. The other key does raise a prompt to offer more features.

@section Selections and Deletions

Several alternatives offer to delete (cut) text.

@enumerate
@enumerate
@item
Use @kbd{Control-x} to cut the current line.
@item
Use @kbd{Control+j},@kbd{Control+l} to delete backward, forward char.
@item
Use @kbd{Control + u} to delete previous word.
@item
Use @kbd{Control + $} to delete up to end of line.
@end enumerate
@item
Use @kbd{Alt+d} to trigger a prompt. This will offer you to delete what you want.
@item
Alternatively, first mark (select) text you want to select then use @kbd{Control+x}.
@end enumerate

Right, but how to select? Once again, several alternatives offer.. bla.. bla...

@enumerate
@item
The paddle allow to directly select (``mark'') text : keep @kbd{shift} pressed, then move either with arrows or @kbd{Alt+<some key of the paddle>}. While other ways are possible, using @Kbd{Alt-Shift-u}, for example,
will select previous word (or extend current selection to previous word).

@item
An alternative in order to select text is to press @kbd{Alt+a} to set a mark, then move to extend selection.

@item
An alternative is to press @kbd{Control+a} to invoke ``a-'' prompt, allowing to select ``a-'' word, ``a-'' sentence, and so on, or to set the mark.

@item
Finally, to start a rectangular selection, use @Kbd{Control+Return}. This is now cua rectangular selection.
@end enumerate


@section Cut Copy Paste

When no selection is active, use @kbd{Control + x} to cut current line, or a deletion command since deletions actually cut text (as a reminder, emacs `kill-' commands will copy to kill-ring, while emacs `delete-' commands will not).

Use @kbd{Control + c} to copy currrent line, or, while a selection is active, copy this selection.

Use @kbd{Control + v} to paste the current clipboard. Following @kbd{Control + v} will replace this paste with precedent clipboard item. However, if you need to paste several times, first invoke a numeric prefix argument to specify how many times to paste, then type @kbd{Control+v}. Or, you can use @kbd{Alt + v} to invoke an advanced ``Paste'' prompt.


@section Undo or Redo

Use @kbd{Alt+z} to undo. Or, use @kbd{Control+z} to invoke undo-tree visualizer to play with discard changes in an advanced way.


@section Advanced Edition

Most avdanced editon features rely on @kbd{Control-r}, which will invoke replace prompt, allowing you to replace-regexp, merge-lines, delete spaces, or invoke other functions.

@enumeratek
@item
@kbd{Alt+y} will copy to current line char under point (on the below line).
@item
@kbd{Alt+e} will copy to current line char above point (on the above line).
@end enumerate


@kbd{Alt+v} prompt to open a line.
@kbd{Control+g} global prompt will also propose goal-column feature. (This prompt is hard to reached ; it won't offer really much.)


@node Files Buffers Windows
@chapter Files Buffers Windows

Use @kbd{Control + s} to save current file, @kbd{Alt + s} to invoke a prompt to rename it.
@enumerate
@item
Use @kbd{Control+o} to open a file, a window, a buffer, or use bookmarks,... Or move to another frame...or buffers list...
@item
Use @kbd{Control+w} to raise a prompt offering to close this frame, or move to another frame, .... Or @kbd{Alt+w} to make this frame the only visible one.
@item
Use @kbd{Control+n} to open a sracth buffer (blank untitled buffer) or split current frame.
@item
Use @kbd{Control+t} to open another tab. It directly shows up an ibuffer list.
@end enumerate 

@verbatim
² will invoke buffers list.
@end verbatim


@node Hacking
@chapter Hacking

The print buffer, invoked from @kbd{Control+p}, will offer you to eval things or make (compile). The insert prompt, invoked from @kbd{Alt+v}, will allow you to insert a file, or the result of an async shell command into a new buffer. The save buffer, from @kbd{Alt+s}, offers to use git power to save cats or so.


@node NU & other libraries
@chapter NU & other libraries

How does NU integrate with other libraries?

@section evil-mode

While nu-mode is not a modal editor, and aims at being the most efficient keymap, sometimes using lot of modifiers might still be harassing. Using vim keymap is feasible : you can activate evil-mode, then switch from evil-state to emacs-state as you want.

Even while in evil-state, you will enjoy a few nu-mode keys, like Alt+v, Alt+f, and probably many others. However vim paddle (hjkl for left down up right) and nu-mode paddle (ijkl for up left down right) disagree on three of these four keys! If you want to have evil with nu-mode paddle, I recommend you to make vim paddle similar to nu-mode. Since @key{i} will not be available anymore to insert, use @key{h} for this purpose. Simply put below lines on your .emacs:

@lisp
(define-key evil-normal-state-map (kbd "h") 'evil-insert)
(define-key evil-normal-state-map (kbd "j") 'evil-backward-char)
(define-key evil-normal-state-map (kbd "i") 'evil-previous-line)
(define-key evil-normal-state-map (kbd "k") 'evil-next-line)
@end lisp

Obviously this only fixes the basic paddle. Backward and Foward word are different, but fixing the paddle is fine.

@section magit

Use Alt+s, ie save-prompt, to gain access to magit-status.

@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include fdl-1.3.texi

@bye
 
@c Local Variables:
@c mode: texinfo
@c TeX-master: t
@c sentence-end-double-space: t
@c End:
