\input texinfo @c -*-texinfo*-*
@setfilename nu.info
@documentencoding ISO-8859-1
@include version.texi
@settitle Nu-mode manual
@include macros.texi


@copying
This manual is for Nu (version @value{VERSION} of @value{UPDATED}),
a modern keybinding for Emacs.
Copyright @copyright{} 2014 @authors{}.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation

@end copying

@dircategory Emacs
@direntry
* Nu: (nu). Modern keybinding for Emacs.
@end direntry


@titlepage
@title Nu
@subtitle Modern keybinding for Emacs
@author @authors()
@page
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Nu

This is the manual for Nu, a modern keybinding for Emacs.
@end ifnottex

@menu
* Overview::
* NU for the power user::
* View and Edit::
* Files Buffers Windows::
* NU & other libraries::
* GNU Free Documentation License::
@end menu

@node Overview
@chapter Overview

``Nu `` is a modern keybinding for Emacs.

nu-mode is a global minor mode, its keymap,
and the commands which are not provided in raw Emacs.

Modern, means respecting conventions like
@enumerate
@item @kbd{Control-f} to find
@item @kbd{Control-r} to replace
@item @kbd{Control-s} to save
@item @kbd{Control-x}, @kbd{Control-c}, @kbd{Control-v} to cut, copy, paste.
@end enumerate

To allow user to leverage large panel of functions, nu-mode relies on prompts. For example, @kbd{Control-f} raises a prompt precising which key - actually, which sequence - to press in order to execute desired function : once @kbd{Control-f} has been pressed and the ``Find-prompt'' appears, pressing f will start a regexp search, while @kbd{g} will execute goto-line, or @kbd{s} will move point to previous selection.

nu-emacs does not only provides nu-mode. There are also two independant parts
@enumerate
@item nu-alias is a simple mechanism to define aliases into org-mode file(s). This way its easier to maintain aliases to be invoked from Mx. See its REAME.
@item dhammacakka is a light set of customization. See its README.
@end enumerate


@section Dependencies
Nu depends on several libraries, both native or external ones :
@enumerate
@item help-fns+
@item undo-tree
@item ace-jump
@item recentf
@item cua-selection-mode
@end enumerate


@section Help

Use @kbd{Control-q} to quit a sequence or a command in progress.
Use @kbd{Alt+z} to undo last command.

Prompts are usually triggered using a @kbd{Control} modifier and advertise an alternative @kbd{Alt} operating using the same key. Inverse is sometimes true : since @kbd{Control+s} invoking a prompt would be irritating, this sequence directly saves buffer, while @kbd{Alt+s} runs the ``save prompt''.

@node NU for the power user
@chapter NU for the power user

If you are not used to Emacs, reading this chapter is not necessary. But Emacs veteran should probably start here.
emacs-nu redefines many keys, however two points make learning curve shorter

@enumerate
@item For any user, knowing CUA keybinds will make emacs-nu discoverable.
@item For veteran Emacs user, two important sequences remain:
@end enumerate

@kbd{M-x} is still there. This means, you can probably obtain what you want.
Also, @kbd{C-h} for help-prefix is still there.

Now, three things should probably be kept in mind while trying nu-mode

@enumerate
@item
To repeat a command, use Alt <Space>.
@item
To trigger a major mode sequence, start with Control <Space>. This will invoke vanilla emacs C-c. For example, into org-mode, use C-<SPC> C-n to navigate to next node. If you already defined you own keys starting with C-c, do not amend this definition.

@lisp
(define-key mykeymap kbd("\C-c h") myfunction)
@end lisp

To invoke above myfunction example, press @kbd{Control-SPC m}

@item
You should not rely on C-x, or at least no regularly. However to trigger x prefix, use C-M-<SPC>

@end enumerate

@node View and Edit
@chapter View and Edit


@section Navigate

While arrows still work, Nu uses alt key to navigate.
The thumb presses Alt key, while finger remains safe.
Navigate up left right down using Alt and :


@w{    }I@*
@w{     }J@w{ }K@w{ }L


Additionally, use Alt u and alt o to move
to previous/next word.

@w{  }U@w{ }I@w{ }O@*
@w{     }J@w{ }K@w{ }L


Use Alt$ to go to end of line.

To reach a line, beginning of buffer, end of buffer, use Control+f then the appropriate key. Just read the prompt.

@section Selections and Deletions

Use Control-x to cut the current line.
Use Control + paddle + j,l to delete backward, forward char
Use Control + u to delete previous word

Use Alt+d to trigger a prompt. This will offer you to delete what you want.


The paddle allow to directly select (``mark'') text.
While other ways are possible, using Alt-Shift-U, for example,
will select previous word (or extend current selection).

An alternative to select text is to Alt+a to set a mark, then move to extend selection. An alternative is to press Control+a to invoke ``a-'' prompt, allowing to select ``a-'' word, ``a-'' sentence, and so on, or to set the mark, including to start a rectangular selection.


@section Cut Copy Paste

When no selection is active, use Control + x to cut current line, or a deletion command since deletions actually cut text.

Use Control + c to copy currrent line, or, while a selection is active, copy this selection.

Use Control + v to paste the current clipboard. Following Control + v will replace this paste with last clipboard item. However, if you need to paste several times, you can use Alt + v to invoke and advanced ``Paste'' prompt.



@section Undo or Redo

Use Alt+z to undo. Or, use Control+z to invoke undo-tree visualizer to play with discard changes in an advanced way.


@section Advanced Edition

Most avdanced editon features rely on Control-r, which will invoke replace prompt, allowing you to replace-regexp, merge-lines, delete spaces, ...

Alt+y will copy to current line char under point (on the below line).
Alt+e will copy to current line char above point (on the above line).

Control+g global prompt will also propose goal-column feature.

@node Files Buffers Windows
@chapter Files Buffers Windows

Use Control + s to save current file, Alt + s to invoke a prompt to rename it.
Control+g ``global'' prompt will allow you to manipulate frames.
Â² will invoke buffers list.

Use Control+o to open a file, a window, a buffer, or use bookmarks,...
Use Control+w to close this frame. Or Alt+w to make this frame the only visible one.
Use Control+n to open a sracth buffer (blank untitled buffer).

@node NU & other libraries
@chapter NU & other libraries

How does NU integrate with other libraries?


@section evil-mode

While nu-mode is not a modal editor, and aims at being the most efficient keymap, sometimes using lot of modifiers might still be harassing. Using vim keymap is feasible : you can activate evil-mode, then switch from evil-state to emacs-state as you want.

Even while in evil-state, you will enjoy a few nu-mode keys, like Alt+v, Alt+f, and probably many others. However vim paddle (ijkl) and nu-mode paddle (ijkl) disagree on three of these keys! If you want to have evil with nu-mode paddle,
simple put below lines on your .emacs:

@lisp
(define-key evil-normal-state-map (kbd "h") 'evil-insert)
(define-key evil-normal-state-map (kbd "j") 'evil-backward-char)
(define-key evil-normal-state-map (kbd "i") 'evil-previous-line)
(define-key evil-normal-state-map (kbd "k") 'evil-next-line)
@end lisp

This only fixes the basic paddle. Backward and Foward word are different, but fixing the paddle is fine.

@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include fdl-1.3.texi

@bye
 
@c Local Variables:
@c mode: texinfo
@c TeX-master: t
@c sentence-end-double-space: t
@c End:
