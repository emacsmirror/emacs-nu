\input texinfo @c -*-texinfo*-*
@setfilename nu-mode.info
@documentencoding ISO-8859-1
@include version.texi
@settitle nu-mode manual
@include macros.texi


@copying
This manual is for nu-mode (version @value{VERSION} of @value{UPDATED}),
a modern keybinding for Emacs.
Copyright @copyright{} 2014 @authors{}.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation

@end copying

@dircategory Emacs
@direntry
* nu-mode: (nu-mode). Modern keybinding for Emacs.
@end direntry


@titlepage
@title nu-mode
@subtitle Modern keybinding for Emacs
@author @authors()
@page
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top nu-mode

This is the manual for nu-mode, a modern keybinding for Emacs.
@end ifnottex

@menu
* Overview::
* View and Edit::
* Files Buffers Windows::
* Hacking::
* nu for the power user::
* Customization::
* nu and some specific modes::
* nu & other libraries::
* Contributing::
* GNU Free Documentation License::
@end menu

@node Overview
@chapter Overview

``nu-mode `` is a modern keybinding for Emacs.

nu-mode is a global minor mode, its keymap,
and the commands which are not provided in raw Emacs.

Modern, means respecting conventions like
@enumerate
@item @kbd{Control-f} to find
@item @kbd{Control-r} to replace
@item @kbd{Control-s} to save
@item @kbd{Control-x}, @kbd{Control-c}, @kbd{Control-v} to cut, copy, paste.
@end enumerate

To allow user to leverage large panel of functions, nu-mode relies on prompts. For example, while @kbd{Control+f} will directly offer to isearch-forward-regexp, @kbd{Alt+f} will raise a ``find-prompt'' offering several search related features. The prompt will display a list of keys - actually, sequences - and associated functions : t to find-tag, w to ace-jump-word-mode, m for imenu, b for regexp-builder, @kbd{Alt+f} to isearch-forward-regexp, and so on.

Most common shortcuts - ie, common to most applications - respect this guideline. Thus, there is a prompt for @kbd{s}, @kbd{v}, @kbd{a}... Most prompts rely on @kbd{Alt} modifier to be run. There are exceptions. For example, @kbd{Control+n} will raise a prompt to precise which kind of ``new'' stuff to produce.


@section Dependencies
nu-mode depends on several libraries, both native or external ones. These are all optional dependencies.
@enumerate
@item help-fns+, to describe-keymap
@item undo-tree
@item ace-jump
@item recentf
@item cua-selection-mode (see : paddle)
@item magit
@end enumerate


@section Help

Use @kbd{Control-q} to quit a sequence or a command in progress.
Use @kbd{Alt+z} to undo last command.
Use @kbd{Control+h} to gain access to help functions. This includes the usual shortcuts to describe what a key does, or what a function does.
If you messed up, use @kbd{Control+w} then @kbd{Control+q} to quit.

Prompts are usually triggered using a @kbd{Alt} modifier and advertise a function using the same key, but with @kbd{Control} modifier. For example, @kbd{Alt+s} will pop-up a save prompt, while @kbd{Control+s} directly saves the current buffer.

These prompts offer you to quickly learn where functions are.

@section Prompts

Prompts are basically a window showing several possible keys, and which functions are to be run given this input. However some features deserve some deeper explanation. When a key does ``raise a prompt'', minibuffer will ask for an input or to press ? to get more details. This is basically a key sequence with a minibuffer prompt (this function is 'nu-light-prompt-for-keymap and is usable with any keymap, like help-map, and this is what Control+h does, for example).

Pressing ? will raise a ``buffer-prompt''. First, a buffer prompt will display available keys (what key sequences do not have). Second, a prompt will also advertise direct shortcuts to commands : ie, shortcuts that would have directly run some function without going through the prompts. For example, using Control+w prompt, it is possible to press w to 'delete-other-windows, but prompt will advertise that Alt+n would directly have called this same function without requiring to go through key sequence. This does not mean using the prompt was wrong. It is rather meant as a way to discover and as a reminder, since nu-mode has many alternatives.

Third, a prompt (no matter light- or buffer-) allows you to use arguments in two ways. The first way, is to use standard Emacs keys to trigger an argument (eg, @kbd{Control+1}, or @kbd{Alt+1}, or @kbd{Alt+-}, or use the universal argument which is bound in nu-mode to @kbd{Alt+p}), then run the prompt, then choose the command that will be affected by the argument. The second way to use arguments is to first run the prompt, then directly press a digit or - to increment the argument. Then, press the relevant key to run the desired function.

Fourth, a buffer-prompt also allows to get some help about functions. Run the buffer-prompt, press ?, then the same keymap as usual will not run functions but describe functions. For example, while `replace-prompt' ususally run `revert-buffer' on @key{a} press, once ? has been pressed, @key{a} will instead describe function `revert-buffer'.

Fifth, a prompt (no matter light- or buffer-) can be toggled to some `repeat' state. Run a prompt, then press @key{+}. You can then use the prompt as usual, except that after running the function, prompt will ask you again for a key, with the same keymap. Escape the prompt pressing any unbound key. You might notice is does allow some sort of modal editing, but this is not really the intented behaviour. This feature is rather made to make some commands easier, for example deleting a paragraph then two word then a character. Modal editing is possible using nu-mode, see below.

Sixth, a buffer-prompt can be scrolled using <space> and <backspace>.

Seventh, a prompt (no matter light- or buffer-) can always be escaped using `q'. This letter is never bound. You can always use it. Note that @kbd{Control+q} and @kbd{Alt+q} are neither bound. However, @key{Q} -ie, shift plus q - might be bound, because @kbd{Shift+q} cannot be a mistake.


@node View and Edit
@chapter View and Edit

Obviously just type keys to input text. With slight notes : @kbd{Alt+m}to carriage return + indent. Use @kbd{Alt+v} + c to insert literally a character.

@section Navigate

While arrows still work, nu-mode uses @key{Alt} key to navigate.
Hence, the thumb often presses @key{Alt} key, while pinky finger remains safe. This is exactly the same principle than ErgoEmacs applies.
Navigate up left right down using @key{Alt} and :


@w{    }I@*
@w{     }J@w{ }K@w{ }L


Additionally, use @key{Alt} @key{u} and @key{Alt} @key{o} to move to previous, next word.

@w{  }U@w{ }I@w{ }O@*
@w{     }J@w{ }K@w{ }L


Use @kbd{Alt+$} to go to end of line, or @kbd{Alt+h} to go beginning of line. To reach a line, or the beginning of buffer, or the end of the buffer, use @kbd{Alt+g} then the appropriate key. Just read this goto-prompt. To find a char, a string, a line starting with a specific letter, use @kbd{Alt+f}. To directly trigger a regexp-search, use @kbd{Control+f}.

Notice that f key, used both with `control' and `alt' modifiers, offers find-related features. One of these keys is direct : it directly executes a command, & maybe a very common one. The other key does raise a prompt to offer more features. This principle to have one 'alt' modifier plus one 'control' modifier applies to other keys, as well.

Numeric arguments can apply to navigation. Press @kbd{Alt+1} then @kbd{Alt+5} to input 15 as a numeric argument ; now input @kbd{Alt+k} to go down one line : this will go down 15 lines.

`Repeat' also applies to navigation. Enter @kbd{Control+Return} to repeat a navigation.

However - let's finish with navigation. Use @kbd{Alt+Space} to scroll (to the bottom), and @kbd{Alt+Backspace} to go back to the top. Emacs vanilla keybindings for `help-mode' and some other offer Space and Backspace to do this - this is one of the few conventions respected into Emacs-nu. Yup.

Note that emacs sometimes require you to scroll another window. This is quite useful to go through *Help* buffer, for example. If you need this, use @kbd{Control+Alt+Space}. To scroll the other way around the other window, use first a negative argument (@kbd{Alt+-}).

This navigation chapter is meant as a general introduction to emacs-nu ; because navigation is a basis, but also because we saw many emacs-nu principles :
@enumerate
@item
Direct keys for most common operations.
@item
Prompts for slighly less common to rare operations.
@item
Numeric arguments.
@item
Repeat.
@item
Few emacs convention respected, but some.
@end enumerate

These same principles apply to other prompts.

@section Selections and Deletion

Now that you can input text plus navigate, let's examine several alternatives to delete (cut) text.

@enumerate
@enumerate
@item
Use @kbd{Control-x} to cut the current line.
@item
Use @kbd{Control+j},@kbd{Control+l} to delete backward, forward char. Backspace / Delete are still available.
@item
Use @kbd{Control + u} to delete previous word.
@item
Use @kbd{Control + $} to delete up to end of line.
@end enumerate
@item
Use @kbd{Alt+d} to trigger a prompt. This will offer you to delete what you want (function, org-node, sentence, ...).
@item
Alternatively, first mark (select) text you want to select then use @kbd{Control+x}.
@end enumerate

Right, but how to select? Once again, several alternatives...here we go

@enumerate
@item
The paddle allow to directly select (``mark'') text : keep @kbd{shift} pressed, then move either with arrows or @kbd{Alt+<some key of the paddle>}. Using @kbd{Alt-Shift-u}, for example, will select previous word (or extend current selection to previous word).

@item
An alternative in order to select text is to press @kbd{Alt+a} to set a mark, then move to extend selection. You can also use a direct key to set a rectangular mark : @kbd{Control+S}, ie @kbd{Control+Shift+s}.

@item
An alternative is to press @kbd{Control+a} to invoke ``a-'' prompt, allowing to select ``a-'' word, ``a-'' sentence, and so on, or to set the mark. Or, to set a rectangular mark. Read the prompt!

@end enumerate

Once some text is selected you can ``toggle the point and mark'' using @kbd{Control+a}, or deactivate the selection using @kbd{Alt+a}, or cut the text using @kbd{Control+x} (or @kbd{Alt+d} might be nice depending on your fingers position).

@section Cut Copy Paste

When no selection is active, use @kbd{Control + x} to cut current line, or a deletion command since deletions actually cut text (as a reminder : emacs `kill-' commands will copy to kill-ring, while emacs `delete-' commands will not).

Use @kbd{Control + c} to copy currrent line, or, while a selection is active, copy this selection.

Use @kbd{Control + v} to paste the current clipboard. Following @kbd{Control + v} will replace this paste with precedent clipboard item. However, if you need to paste several times, first invoke a numeric prefix argument to specify how many times to paste, then type @kbd{Control+v}. Or, you can use @kbd{Alt + v} to invoke an advanced ``Paste'' prompt.


@section Undo or Redo

Use @kbd{Alt+z} to undo. Or, use @kbd{Control+z} to invoke undo-tree visualizer to play with discard changes in an advanced way. This screen displays last changes, and you can navigate these using the paddle (@kbd{Alt+i}, @kbd{Alt+j}, @kbd{Alt+k}, @kbd{Alt+l}). Press @key{q} to quit this screen.

It is also possible to directly redo using @kbd{Control+Shift+z}.

@section Advanced Edition

Some advanced editon features rely on @kbd{Control-r}, which will invoke replace prompt, allowing you to replace-regexp, merge-lines, delete spaces, or invoke other functions.

@enumerate
@item
@kbd{Alt+y} will copy to current line char under point (on the below line).
@item
@kbd{Alt+e} will copy to current line char above point (on the above line).
@end enumerate


@kbd{Alt+v} prompt to open a line.
@kbd{Alt+s} prompt allows you to save current column as a goal-column. While you move next and previous lines, cursor will try to reach this column as far as possibe.

@kbd{Control+b} will run nu-bold, which will act differently according to major-mode. This try to emphasis, which might have a different meaning given the mode.
@kbd{Alt+b} will run an emphasis (bold) prompt, allowing to indent, fill-paragraph, and so on.


@node Files Buffers Windows
@chapter Files Buffers Windows

@section Internal Windows and Tabs

Emacs has a specific word for its internal frames : it says `Windows'. This is awful, but might be understood given we precise these are internal windows, not X (or Wayland) windows. Emacs has no support for standard tabs because there would be too much tabs. But hidden buffers are tabs, aren't they?

Use @kbd{Control+o} prompt to open a buffer. You can use @kbd{Control+Shift+o} to directly be prompted for a buffer to open. Or, @kbd{Control+Shift+i} to direclty open next buffer, skipping *Messages* or *Backtrace* and the like. @kbd{Control+n} prompt allows you to create another internal window. @kbd{Control+w} allows you to close document or reorganize internal windows (if you jsut want to close current document, directly use @kbd{Alt+w}). @kbd{Alt+n} would delete-other-windows (ie, internal windows).

Use @kbd{Control+t} to open another tab. It does prompt for a buffer to open, but you can precise a file name. Key @kbd{Alt+t} would swith from a `tab' to another one (other-window, ie other-internal-window). Note that, in order to switch to another tab, you could also call ace-jump-char-mode (either @kbd{Alt+f f} or directly @kbd{Control+Shift+f} then specify which character of the other tab you want to jump to). If you actually just need to scroll another tab, stay in current one and use @kbd{Control+Alt+Space} to 'scroll-other-window'.

@section Files, Bookmarks

Use @kbd{Control+s} to save current file, @kbd{Alt+s} to invoke a prompt to rename it.
@kbd{Control+o} to open a file. You can also have bookmarks : use the same open-prompt and save-prompt for this.

@section External Windows

It is possible, from Emacs to handle a bit of window management. But you should rather use a decent window manager.

@node Hacking
@chapter Hacking

The print buffer, invoked from @kbd{Control+p}, will offer you to eval things or make (compile). The insert prompt, invoked from @kbd{Alt+v}, will allow you to insert a file, or the result of an async shell command into a new buffer. The save buffer, from @kbd{Alt+s}, offers to use git power to save cats or so.

@kbd{Control+p} also offers to grep, find-grep or ediff.

As seen above, @kbd{Alt+b} will run an emphasis-prompt, which allows to comment. Onto c-mode or various lisp-mode, @kbd{Control+b} will toggle comments.

@kbd{Alt+s} prompt also allows you to create tags to find definitions.

@node nu for the power user
@chapter nu for the power user

If you are not used to Emacs, reading this chapter is not necessary. But Emacs veteran should probably start here.
emacs-nu redefines many keys, however two points make learning curve shorter

@enumerate
@item For any user, knowing CUA keybinds will make emacs-nu discoverable.
@item For veteran Emacs user, two important sequences remain:
@end enumerate

@kbd{M-x} is still there. This means, you can probably obtain what you want.
Also, @kbd{Control+h} for help-prefix is still there.

Now, two things should probably be kept in mind while trying nu-mode

@enumerate
@item
To trigger a major mode sequence, start with @kbd{Control+Space}. This will invoke vanilla emacs @kbd{Control+c}. For example, into org-mode, use @kbd{Control+Space Control+n} to navigate to next node. If you already defined you own keys starting with @kbd{Control+c}, do not amend this definition.

@lisp
(define-key mykeymap kbd("\C-c h") myfunction)
@end lisp

To invoke above myfunction example, press @kbd{Control-SPC h}.

@item
You should not rely on @kbd{Control+x}, or at least no regularly. However to trigger x prefix, use @kbd{Control+g}. This will raise a prompt to trigger Control-X-Prefix.

@end enumerate

`Repeat' is invoked from @kbd{Control+Return}. It was hacked to work with prompts : thus, you can repeat a command ran from a prompt. Prefix arguments (numeric-argument, negative-argument) can work : either use standard @kbd{Alt+1}, @kbd{Alt+2} ... shortcuts plus one command. Or, from a prompts, directly type a figure (or, a number) then choose the command (eg, from delete prompt, type @key{3} then invoke kill-word to kill 3 words ; or type @key{2} then @key{3} to input 23). Alternatively, first trigger the argument from standard shortcuts, then call the prompt. What is invoked from the prompt will make use of that argument.

Note that `where-is` function, which sometimes advertises shortcuts, will not work as usual, since a prompt is not a keymap : `where-is` do not know how to invoke @kbd{Control-r} then @kbd{r} to invoke replace-regexp. (Did you try `where-is git push' in magit? this does not work. What is acceptable for maggit is not for a full keymap.)

Thus :
@enumerate
@item
For each function accessible from a prompt, an additional shortcut is created, accessible from @kbd{menu} plus the same @kbd{key} than the prompt, in order to make where-is advertise. Hence, if you read `You can run this command with <menu> r k`, please understand, despite it is also true, that you can also run the command with @kbd{Control-r-k}.
@item
From the help prompt (@kbd{Control-h}), run @key{h} to invoke nu-help. This function will present you all prompts, and will offer you to describe their keymaps - that is, all the functions you can access from these prompts.
@end enumerate

@node Customization
@chapter Customization

As ususal with Emacs, customization comes down at the very first usage. So even before to describe edition, customization has to be mentioned. There is not a single defcustom inside nu-mode. All customization is to be done in other ways.

If you want prompts to automatically prompt a buffer rather than just a 'nu-light-prompt-for-keymap, which is the default, use :

  (defalias 'nu-prompt-for-keymap 'nu-buffer-prompt-for-keymap)

If you dislike both nu-buffer-prompt-for-keymap and default nu-light-prompt-for-keymap (why? please report a bug!!), you're free to develop your own function. The only requirement is this function to offer to call-interactively the functions being part of the prompt. Be warned, you'll have to handle a huge amounts of details however if you want your function to be pleasant =)


If you want to amend nu-mode keymap, amend nu-keymap. As of August, 2014, some prompts have a ``fixed'' map you can amend directly:
- nu-window-map (Control+w)
- nu-new-map (Control+n)
- nu-a-map (Control+a)

If you want to amend some ``dynamic prompt'', add a hook after its ``populating''
- nu-populate-print does populate print-map (Control+p)
- nu-populate-delete (Control+d, nu-delete-map)
- nu-populate-bold-map (Control+b, nu-bold-map)
- nu-populate-insert-map (Alt+v, nu-insert-map)
- nu-populate-save-map (Alt+s, nu-save-map)
- nu-populate-open-map (Control+o, nu-open-map)
- nu-populate-goto-map (Alt+g), nu-goto-map)

You can also raise prompt for maps outide of nu-mode :
- ctl-x-map, using Control+Shift+x
- help-map

Finally, it is totaly feasible to use nu-prompts styles for your own keymap : just (nu-prompt-for-keymap some-keymap), and you're there : one nu-mode prompt will offer you to leverage some-keymap.

nu-mode does trigger some settings which are not mandatory

cua-selection-mode is really logical given the nu-mode paddle. However, feel free to fix this call in nu-mode initialization.
   (cua-selection-mode 1)

Also, cursor-type is amended. You can set it back, but again, despite not mandatory for nu-mode to work this is really logical given the keybinding.
   (set-default 'cursor-type 'bar)

@node nu and some specific modes
@chapter nu and some specific modes

@section term

term is perfectly usable with nu-mode. Just press Control+Space then Control+c to run a sigstop. Or, Control+Space then Control+b to open another buffer. The vanilla x keymap is used. As of today there is no prompt however.

@section dired

dired allows to use nu-mode shortcuts to navigate. Use @kbd{Alt+p} (uniserval-argument) then s key to edit the ls command.

Some prompts are adapted to dired : selections (with @kbd{Control+a}) for example, will provide the different dired options to mark files. Look at ``replace'', ``insert'', ``find'', and so on. Where it make sense the usual prompts will be useful inside dired.

Keys that *remain* useful inside dired are kept.

@node nu & other libraries
@chapter nu & other libraries

How does nu-mode integrate with other libraries?

@section org

As of today, nu-mode has some features related to org.  @kbd{Alt+s} prompt will allow you to org-store-link. @kbd{Alt+v} prompt will allow you to org-table-insert-column or row. It is possible to insert a timestamp. The Control+Space Control+Space shortcut will trigger what would have been Control+c Control+c. @kbd{Control+b} will run org-emphasis. Using open-prompt, it is possible to open agenda.

It is also possible to delete a node from the delete prompt. As you see, rather than storing all org-related features in one place, nu-mode does enrich its usual prompts or even commands given the org-mode context.


@section dired

Dired is correctly integrated inside nu-mode. Use paddle to navigate, selection prompt to mark files, deletion prompt, replacement prompt... These prompts advertise how to use dired directly (not using prompts) while relevant.

However dired keys are not all rebound, while part of them should.

@section magit

Use Alt+s, ie save-prompt, to gain access to magit-status. Currently it is not properly integrated, in the sense that all nu-mode prompts would have to change once maggit-status-mode is active.

However a work has started to integrate properly. For example, replace prompt will offer to toggle whether next commit has --amend.

@section helm

Some prompts do provide access to helm functions : open prompt to access help-mini or help-find-files. Or insert prompt to access kill-ring from helm-show-kill-ring.

Once helm buffer is opened to let you select file / buffer / function or whatever helm migth help you select, use paddle (@kbd{M-i} , @kbd{M-k} to navigate up/down).

@section god-mode

god-mode is one possible modal editing. See below about evil-mode.
god-mode can be toggled using @kbd{Control+g}. Using vanilla god-mode, it is then possible to quit god-mode pressing @kbd{Control+g} again (the modifier is necessary).

I'm currently waiting for a patch to be integrated, in order to allow god-mode to allow configuring which modifier is added to keys. This patch will allow to use god-mode with alt automatically triggered. Forward / Backward char / line / word will be one key distant, while delete prompts becomes nicer. Commands relying on @kbd{Control} modifier will be triggered with @key{g} key. Using this, quitting god-mode is @kbd{gg}, since first g will toggle Control modifier.


@section evil-mode

While nu-mode is not a modal editor, and aims at being the most efficient keymap, sometimes using lot of modifiers might still be harassing. Using vim keymap is feasible : you can activate evil-mode, then switch from evil-state to emacs-state as you want.

Even while in evil-state, you will enjoy a few nu-mode keys, like Alt+v, Alt+f, and probably many others. However vim paddle (hjkl for left down up right) and nu-mode paddle (ijkl for up left down right) disagree on three of these four keys! If you want to have evil with nu-mode paddle, I recommend you to make vim paddle similar to nu-mode. Since @key{i} will not be available anymore to insert, use @key{h} for this purpose. Simply put below lines on your .emacs:

@lisp
(define-key evil-normal-state-map (kbd "h") 'evil-insert)
(define-key evil-normal-state-map (kbd "j") 'evil-backward-char)
(define-key evil-normal-state-map (kbd "i") 'evil-previous-line)
(define-key evil-normal-state-map (kbd "k") 'evil-next-line)
@end lisp

Obviously this only fixes the basic paddle. Backward and Foward word are different, but fixing the paddle is fine.


@node Contributing
@chapter Contributing

As of today nu-mode only has one author, & contribution is more than welcomed. Please look at github.

@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include fdl-1.3.texi

@bye

@c Local Variables:
@c mode: texinfo
@c TeX-master: t
@c sentence-end-double-space: t
@c End:
