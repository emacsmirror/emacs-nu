\input texinfo @c -*-texinfo*-*
@setfilename nu-mode.info
@documentencoding ISO-8859-1
@include version.texi
@settitle nu-mode manual
@include macros.texi


@copying
This manual is for nu-mode (version @value{VERSION} of @value{UPDATED}),
a modern keybinding for Emacs.
Copyright @copyright{} 2017 @authors{}.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation

@end copying

@dircategory Emacs
@direntry
* nu-mode: (nu-mode). Modern keybinding for Emacs.
@end direntry


@titlepage
@title nu-mode
@subtitle Modern keybinding for Emacs
@author @authors()
@page
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top nu-mode

This is the manual for nu-mode, a modern keybinding for Emacs.
@end ifnottex

@menu
* Overview::
* Files Buffers Windows::
* Completion::
* Hacking::
* Advanced Usage::
* Customization::
* Integration::
* Drawbacks & Limits::
* Contributing::
* GNU Free Documentation License::
@end menu

@node Overview
@chapter Overview

WARNING : this package has not yet reached 1.0. It is subject to change.

``nu-mode `` is a modern keybinding for Emacs. It aims at respecting modern conventions like @kbd{Ctrl+c}, @kbd{Ctrl+v}, while making editing as comfortable as possible. It also aims at making Emacs pretty easy & discoverable. It is, currently, primarily designed for azerty and qwerty. Dvoark or BÃ©po users might prefer ErgoEmacs at the moment.

Technically, nu-mode is a global minor mode, its keymap (nu-keymap),
and few commands which are not provided in raw Emacs. Using hooks,
nu-mode does integrate with vanilla Emacs features like isearch or org-mode,
or external features like undo-tree or ivy completion mechanism.

Modern, means respecting conventions like
@enumerate
@item @kbd{Control-f} to find
@item @kbd{Control-r} to replace
@item @kbd{Control-s} to save
@item @kbd{Control-x}, @kbd{Control-c}, @kbd{Control-v} to cut, copy, paste.
@end enumerate

To allow user to leverage large panel of functions, nu-mode relies on prompts. For example, @kbd{Control+f} will raise a ``find-prompt'' offering several search related features.
A prompt is a pop-up displaying a menu. Each feature is accessible with a key.
This prompt allows to discover features, and run many different commands easily.

There are, on the other hands, ``immediate keys''. For example, to isearch-forward-regexp (that is, ``Find''), @kbd{Alt+f} will directly run the command. So, it's still possible to trigger find using one direct shortcut, but another one will allow to discover many features : grep, occur, and so on.

The prompt will display a list of keys - actually, sequences - and associated functions : for example t to find-tag, w to ace-jump-word-mode, m for imenu, b for regexp-builder, o for occur, @kbd{Alt+f} to isearch-forward-regexp.

Prompts are responsive according to mode or text being currently selected : according to major mode or selection state, different functions will be available or not.

@section Navigate

@cartouche
@verbatim
      I
    J K L
@end verbatim
@end cartouche

nu-mode navigation is based on a paddle, an inversed T : while arrows still work, nu-mode relies on @key{Alt} key to navigate. @key{i} @key{j} @key{k} @key{l} go up, left, down, right (previous line, backward char, next line, forward char). If @kbd{Shift} is pressed while moving, this will select or extend selection, as @kbd{Shift} plus arrow does.

If user prefers to use VI like keys to navigate, it is possible to invoke
@code{(vi-setup-vi-paddle)}
This function will maintain @key{Alt} to navigate, but @key{h} @key{j} @key{k} @key{l} will have the same meaning as in VI.

The classic Nu paddle is the same as ErgoEmacs.
There are several reasons leading to this choice ; the most important being @key{Alt} an easy key to press with the thumb, thus sparing pinky finger. Another obvious reason is that many CUA keys are mainly on the bottom left part of the keyboard, while @kbd{Control} key associated with the paddle, has a specific meaning.

(Actually, any nu-mode function, is available from the @key{Alt} key modifier, since prompts offer access to functions.)

Additionally, use @key{Alt} @key{u} and @key{Alt} @key{o} to move to previous, next word.

@cartouche
@verbatim
    U I O
    J K L
@end verbatim
@end cartouche

Use @kbd{Alt+$} to go to end of line, and @kbd{Alt+h} (or, @kbd{Alt+^} to go to beginning of line. @kbd{Shift} only works with @key{h} - but you can use mark prompt for this.

To reach a line, or the beginning of buffer, or the end of the buffer, you could use goto prompt, available from @kbd{Control+g}. Just read this goto-prompt, which offers to navigate per line, paragraph, sentence and so on. To find a char, a string, a line starting with a specific letter, use avy-jump : also inside @kbd{Alt+f} prompt. To directly trigger a regexp-search, use @kbd{Control+f}, which is another way to navigate.

Numeric arguments can apply to navigation. Press @kbd{Alt+1} then @kbd{Alt+5} to input 15 as a numeric argument ; now input @kbd{Alt+k} to go down one line : this will go down 15 lines.

`Repeat' also applies to navigation. Enter @kbd{Control+Return} to repeat a navigation (or any command).

However - let's finish with navigation. Use @kbd{Alt+Space} to scroll (to the bottom), and @kbd{Alt+Backspace} to go back to the top.

Note that Emacs sometimes require you to scroll another window. This is quite useful to go through *Help* buffer, for example. If you need this, use @kbd{Control+Alt+Space}. To scroll the other way around the other window, use first a negative argument (@kbd{Alt+-}).

This navigation chapter is meant as a general introduction to emacs-nu ; because navigation is a basis, but also because we saw many emacs-nu principles :
@enumerate
@item
Direct keys for most common operations.
@item
Prompts for slighly less common to rare operations.
@item
Numeric arguments.
@item
Repeat.
@item
Few emacs convention respected, but some.
@end enumerate

These same principles apply to other prompts.

@section Selections and Deletion

Now that you can input text plus navigate, let's examine several alternatives to delete (cut) text. When there is some important text to work with, it is possible to use @kbd{Alt+a} to set mark, then move to extend selection. A little help will popup so you can use advanced features.

Rectangle selection need to invoke the selection prompt : @kbd{Control+a}. Similarly to classic selection, rectangle selection offer a little popup to help the user discovering how to work.

Sometimes it is more convenient not to select text, but rather to directly delete some text.

@enumerate
@item
Use @kbd{Alt + x} to cut the current line.
@item
Use @kbd{Control + j},@kbd{Control + l} to delete backward, forward char. Backspace / Delete are still available.
@item
Use @kbd{Control + u} to delete previous word.
@item
Use @kbd{Control + $} to delete up to end of line.
@item
Use @kbd{Control +x} to trigger a delete prompt. This will offer you to delete what you want (function, org-node, sentence, ...).
@item
As seen above, alternatively, first mark (select) text you want.
@end enumerate

@section Cut Copy Paste

When no selection is active, use @kbd{Alt + x} to cut current line, or a deletion command since deletions actually cut text (as a reminder : emacs `kill-' commands will copy to kill-ring, while emacs `delete-' commands will not).

Use @kbd{Alt + c} to copy currrent line, or, while a selection is active, copy this selection.

Use @kbd{Alt + v} to paste the current clipboard. Or, you can use @kbd{Control + v} to invoke an advanced ``Paste'' prompt.

@section Undo or Redo

As expected, use @kbd{Alt+z} to undo or @kbd{Control+z} to access the full features or undo visualize.

This screen displays last changes, and you can navigate these using the paddle : @kbd{i} (redo), @kbd{j} (switch to left branch), @kbd{Alt+k} (redo), @kbd{l} (switch to right branch). Press @key{q} to quit this screen or @kbd{Alt+q} to abort. You can also toggle selection mode with @key{s} or toggle timestamps using @key{t}.

@section Dependencies
nu-mode depends on several libraries, both native or external ones.
@enumerate
@item recentf
@item undo-tree

@end enumerate

These are all optional dependencies. First user might one of following completion framework.
@enumerate
@item helm
@item ivy
@end enumerate

Then user might want to be able to access some features.
@enumerate
@item help-fns+, to describe-keymap
@item ace-jump
@item magit
@end enumerate

@section Help

Use @kbd{Control+q} to quit a sequence or a command in progress.
Use @kbd{Control+z} to undo last command.
Use @kbd{Control+h} to gain access to help functions. This includes the usual shortcuts to describe what a key does, or what a function does.
Use @kbd{Alt+q} prompt to quit Emacs (or run some other function).

Prompts are usually triggered using a @kbd{Alt} modifier and advertise a function using the same key, but with @kbd{Control} modifier. For example, @kbd{Alt+s} will pop-up a save prompt offering several features, while @kbd{Control+s} directly saves the current buffer.

These prompts offer you to quickly learn where functions are.


@section Menus and Prompters

This section should explain
@enumerate
@item the menu
that is, the content : the menus are the group of functions that can be accessed.
menus are not organized as menus (toolbar) in vanilla Emacs.
These are more close to Spacemacs : menus are grouped by themes.
Major mode should include its func in various menus, not in one single menus.
@item the prompters
are the method to trigger a func inside the menu,
prompters are the interface.
@end enumerate

If you want to see all available menus, press @key{Control+h <space>} to invoke cheat sheet, then look for prompts functions.

The menus are organized by actions, like : finding, opening, deleting, replacing.
The menus are *not* organized by objects, like : buffers, frames, registers.
Regarding this organization, the disadvantage is to split a set of functions accross various menus.
Advantages
- It feels intuitive to use a logic like <new> <window>, <delete> <window>
  rather than <window> <new>, <window> <delete>
  though it might depend on native language of user
- It helps having a balanced number of menus, with balanced items.
- It is more consistent with CUA shortcuts.
  CUA shortcuts like control+f find, control+n new, are not representing
  objects, but functions.


@enumerate
@item help
menu is not a prompt but is a map. Press @kbd{Control+h} to view many help function.
Install help-fns+ to obtain even more functions.

@item nu-a-prompt (selection)
      this menu is an alternative to set mark.
      it provides few functions regarding selection.

      it also offers to select a directory.

@item replace
      This group includes replace, transpose, sort functions.
      it does not include markdown, indentation => see bold prompt 

@item print
component allows printing, but also evaluating, compiling, converting.
it is also macro evaluation.

@item quit
menu allows few quit related func.

@item save
menu offers to save file, register, bookmarks, session, link...
anything you want to keep for later!

@item find
menu allows to search, occur, find tag, grep, build regexp...

@item goto
menu is for other navigation (not found in other prompts).
This includes going to other window (ace-window).

you might also look at window, and obviously find prompts.

@item window
menu is for window management.

This inludes scrolling, sizing, transpose.
This does not include window creation (Alt+t or new menu)

@item delete
menu prompt allows to delete text, file, buffer, window.

@item copy
menu menu is currently limited.

@item insert
menu allows to insert text, snippets, command, abbrev...
If you want to evaluate, see Print.

@item bold
menu is for capitalize, indent, markdown
it does not offer to transpose, sort. See Replace.

@item new
      menu is either for creation (file, dir, mail)
      or invoke a process (term, calc, command)

@item open
      should open something already existing : 
      file, register, buffer, bookmarks, mails

@end enumerate

The standard prompt is the ``light'' prompt. It does only popup a little message. A key can directly be pressed to trigger the associated function. If the user does not know yet the function, or the key, he might use

@enumerate
@item @key{q} does always quit prompt.
@item Pressing @key{<tab>} will raise a ``full-prompt''. First, a full prompt will display available keys (what key sequences do not have). Second, a prompt will also advertise direct shortcuts to commands : ie, shortcuts that would have directly run some function without going through the prompts. For example, using @kbd{Control+g} prompt, it is possible to press g to 'ace-window, but prompt will also advertise that @kbd{Alt+g} would have directly called this same function without requiring to go through a prompt. This does not mean using the prompt was wrong. It is rather meant as a way to discover and as a reminder, since nu-mode has many alternatives.
@item Pressing @key{<space>} will raise a ``completion-prompt''. This will use a completion mechanism to select the desired function.
@item Pressing @key{?} will allow to call describe-function on a function, rather than running it
@item Prompts allow you to use arguments in two ways. The first way, is to use standard Emacs keys to trigger an argument (eg, @kbd{Control+1}, or @kbd{Alt+1}, or @kbd{Alt+-}, or use the universal argument which is bound in nu-mode to @kbd{Alt+p}), then run the prompt, then choose the command that will be affected by the argument. The second way to use arguments is to first run the prompt, then directly press a digit or - to increment the argument. Then, press the relevant key to run the desired function.
@item A prompt can be toggled to some `repeat' state. Run a prompt, then press @key{+}. You can then use the prompt as usual, except that after running the function, prompt will ask you again for a key, with the same keymap. Escape the prompt pressing any unbound key.
@end enumerate

The ``do-prompt'' from @key{Alt+d} is different.  ``do-prompt'' directly displays all possible keys. It offers several frequent features, and also offers to open a prompt. This makes possible to completely skip the @key{Control} key.

While it would be possible to handle buffers or open files using prompts, ``do-prompt'' offers direct keys for this, making it possible to avoid other prompts most of the time. On the other hand the ``do-prompt'' does not add anything to Nu. It is only a matter of convenience, but usage has shown this to be very useful.

@section Advanced Edition

Some advanced editon features rely on @kbd{Alt+r}, which will invoke replace prompt, allowing you to replace-regexp, merge-lines, delete spaces, or invoke other functions (@kbd{Control+r} directly triggers replace-regexp).

@enumerate
@item
@kbd{Alt+y} will copy to current line char under point (on the below line).
@item
@kbd{Alt+e} will copy to current line char above point (on the above line).
@end enumerate

@kbd{Control+s} prompt allows you to save current column as a goal-column. While you move next and previous lines, cursor will try to reach this column as far as possibe.

@kbd{Alt+b} will run nu-bold, which will act differently according to major-mode. This try to emphasis, which might have a different meaning given the mode.
@kbd{Control+b} will run an emphasis (bold) prompt, allowing to indent, fill-paragraph, and so on.

@node Files Buffers Windows
@chapter Files Buffers Windows

@section Internal Windows and Tabs

Use @kbd{Control+o} prompt to open a buffer. @kbd{Alt+n} allows you to create another internal window ; @kbd{Control+n} would prompt, allowing for example to vertical split or open another external frame or so. @kbd{Alt+w} allows you to kill buffer.

Use @kbd{Alt+t} to open another tab (horizontal-split). @kbd{Control+t} will prompt for which buffer to open in another window.

The delete prompt (@kbd{Alt+d d}) allows to delete either this window or all other windows. The save prompt (@kbd{Control+s}) allows to save current configuration, which you can open from open prompt (@kbd{Control+o}).

To navigate current internal windows, use the tab prompt (@kbd{Control+t}). Note that, in order to switch to another tab, you could also call ace-jump-char-mode (@kbd{Control+f l}. If you actually just need to scroll another tab, stay in current one and use @kbd{Control+Alt+Space} to 'scroll-other-window'.

@section Files, Bookmarks

Use @kbd{Alt+s} to save current file, @kbd{Control+s} to invoke a prompt to rename it.
@kbd{Control+o} to open a file, or @kbd{Alt+d i}. You can also have bookmarks : use the same open-prompt and save-prompt for this.

You can open a directory, too.

dired is the emacs file manager. You can easily use regexp to open, delete, copy, rename files. And since you are using nu-mode, this is regexp-file-management-for-human-beings ,). See the relevant section on Integration.

@section External Windows

It is possible, from Emacs to handle a bit of window management. But you should rather use a decent window manager. Look however at the save proompt...

@node Completion
@chapter Completion

It is possible not to use any completion system using emacs-nu. However i recommend to use @strong{ivy}.

@lisp
(nu-setup-ivy)
@end lisp

An alternative is @strong{helm-mode}

@lisp
(nu-setup-helm)
@end lisp

These convenience functions will bind some features, like find-files, M-x, search, to corresponding function in Ivy or Helm.
Ivy completion system displays some help. Helm does not popup help yet.

@node Hacking
@chapter Hacking

The print buffer, invoked from @kbd{Control+p}, will offer you to eval things or make (compile). The insert prompt, invoked from @kbd{Control+v}, will allow you to insert a file, or the result of an async shell command into a new buffer. The save prompt, from @kbd{Control+s}, offers to use git power thanks to magit.

@kbd{Control+p} also offers to grep, find-grep or ediff.

As seen above, @kbd{Control+b} will run an emphasis-prompt, which allows to comment. Onto c-mode or various lisp-mode, @kbd{Alt+b} will toggle comments.

@kbd{Control+s} prompt also allows you to create tags to find definitions.

@node Advanced Usage
@chapter Advanced Usage

@enumerate
@item
To trigger a major mode sequence, start with @kbd{Control+Space}. This will invoke vanilla emacs @kbd{Control+c}. After this shortcut is pressed, a list of available functions will appear on the bottom of the screen.

If you already defined you own keys starting with @kbd{Control+c}, do not amend this definition.

@lisp
(define-key mykeymap kbd("\C-c h") 'myfunction)
@end lisp

To invoke above myfunction example, press @kbd{Control-SPC h}.

@item
You should not rely on @kbd{Control+x} in its vanilla Emacs meaning, however to trigger x prefix, use @kbd{Alt+d e}. This will raise a prompt to trigger Control-X-Prefix.

@end enumerate

`Repeat' is invoked from @kbd{Control+Return}. It was hacked to work with prompts : thus, you can repeat a command ran from a prompt. Prefix arguments (numeric-argument, negative-argument) can work : either use standard @kbd{Alt+1}, @kbd{Alt+2} ... shortcuts plus one command. Or, from a prompts, directly type a figure (or, a number) then choose the command (eg, from delete prompt, type @key{3} then invoke kill-word to kill 3 words ; or type @key{2} then @key{3} to input 23). Alternatively, first trigger the argument from standard shortcuts, then call the prompt. What is invoked from the prompt will make use of that argument.

Note that `where-is` function, which sometimes advertises shortcuts, will not work as usual, since a prompt is not a keymap : `where-is` do not know how to invoke @kbd{Control-r} then @kbd{r} to invoke replace-regexp.

Thus for each function accessible from a prompt, an additional shortcut is created, accessible from @kbd{menu} plus the same @kbd{key} than the prompt, in order to make where-is advertise. Hence, if you read `You can run this command with <menu> r k`, please understand, despite it is also true, that you can also run the command with @kbd{Control-r-k}.

@node Customization
@chapter Customization

As ususal with Emacs, customization comes down at the very first usage. So even before to describe edition, customization has to be mentioned. There is not a single defcustom inside nu-mode. All customization is to be done in other ways.

@section I prefer VI keys for basic movement

Below code will make h j k l behave like like VI. Beggining of line become i.

@lisp
(nu-setup-vi-paddle)
@end lisp

@section I don't like the Alt modifier for the paddle
While it is easy (simply bind Control+ [ijkluo] to the movement, this is not recommended, since alt key is suppose to offer @strong{any function}.

@section Prompts
If you want prompts to automatically prompt a buffer rather than just a 'nu-light-prompt-for-keymap, which is the default, use :

@lisp
  (defalias 'nu-prompt-for-keymap 'nu-buffer-prompt-for-keymap)
@end lisp

If you dislike both nu-buffer-prompt-for-keymap and default nu-light-prompt-for-keymap, you might also remove prompt mechanism 
@lisp (defalias 'nu-prompt-for-keymap 'nu-which-key-prompt-for-keymap)
@end lisp

This way you maintain the benefit of responsive menus, but meet no more prompts.

Finally you might also write your own prompt. See for example which-key prompt for a simple example.

@section Menus

if you want to amend a menu, either to customize your own setup or to develop a package to integrate a mode with nu-mode, you should define a function which add keybindings to one or more nu-mode menus.

@lisp
(defun my-nu-mode-menu-customization ()
  (if (eq nu-major-mode 'org-mode)
      (define-key nu-window-map "a" 'delete-window)))
@end lisp

Then add the function to nu-populate-hook

@lisp
(add-hook 'nu-populate-hook 'my-nu-mode-menu-customization)
@end lisp

The hook documentations does provide some conventions.

@section Main keymap & free keys
If you want to amend nu-mode keymap, amend nu-keymap. It is part of minor-mode-overrind-map-alist.

Free keys are
@enumerate
@item @key{Control+c} + somme letter. This is the standard Emacs convention.
@item @key{Control} or @key{Alt} + punctuation, except $ or ^, as in VI.
@item @key{Control}+@key{Alt} + anything
@item @key{Control}+@key{Shift} + anything
@item @key{Alt}+@key{Shift} + anything
@end enumerate

@section Completion
Please refer to chapter Completion for ivy & helm. Nu-mode might later integrate more completion systems.


@node Integration
@chapter Integration

nu-mode is to be responsive - in order for major modes to preserve nu-mode philosophy, prompts plus some direct keys will change according to the context : mainly major-mode. More globally, nu-mode does integrate with other libraries.

@section Major-mode : dired

As expected, most of vanilla @strong{Dired} keys are respected : these are keys which should, in Fundamental mode for example, run self-insert-key - for example, @key{d} will mark a file for deletion. You might also use @key{h} so available keys will be displayed at the bottom of the window.

Dired allows to use nu-mode shortcuts to navigate : the @kbd{Alt+i} & @kbd{k} paddle allow to navigate the list, while @kbd{j} will go up to parent directory and @kbd{l} will find-file at point (for example, visit directory at point).

Some prompts are adapted to dired : selections (with @kbd{Alt+a}) for example, will provide the different dired options to mark files. Look at ``replace'', ``insert'', ``find'' prompts and so on. Where it make sense the usual prompts will be useful inside dired. Keys that *remain* useful inside dired are kept.

Use @kbd{Control+p} (uniserval-argument) then @key{s} key to edit the ls command.

@section Major-mode / Minor-mode : org

nu-mode has many features related to org. Rather than storing all org-related features in one place, nu-mode does enrich its usual prompts or even commands given the org-mode context.
You can also use the @key{Control+Space} to discover all org mode features.

@kbd{Alt+n} new prompt allows to capture a note.
Using open-prompt, it is possible to open agenda.
@kbd{Alt+s} prompt will allow you to org-store-link. @kbd{Alt+v} prompt will allow to paste an org link.
This same prompt offers to org-table-insert-column or row. It is possible to insert a timestamp or directly a deadline.
@kbd{Control+b} will run org-emphasis.
@kbd{Alt+b} print prompt allows to expand (``print''), which does correspond to what org-modes binds to Alt+Tab, which is an *awful* choice.
It is also possible to delete a node from the delete prompt.
One can org-mark-ring-goto using goto prompt.

Note that shift selectections do not work with org-mode.

@section Major-mode : magit

Use @key{Control+s}, ie save-prompt, to gain access to magit-status.

Magit already is very easy to use, since you might press @key{h} to discover its features.


@section Major-mode : term

term is a major mode which has two components (sub-modes)
@enumerate
@item char mode
@item line mode
@end enumerate

Default (startup) is char mode.

Char mode is like a real terminal. This allows you to do real stuff, including terminal embedded interfaces. On the other hand, shortcuts are not available since keys are directly sent to term. There is an exception however : press @key{Control+c l} (or, @key{Control+space l}) and you will access a unique prompt. This prompt allows you to navigate to other buffers, trigger line-mode, cancel current command, or call another prompt.

Basically in term mode you only run commands, plus navigate.

When you want to select output or navigate more seriously, just use the line sub-mode. In line-mode, nu-keymap is not amended. The advantage is to gain nu-keymap + some emulation, obviously on the other hand this is not anymore a full term emulation since keys are not directly sent.

From line mode, press control+space to gain a dedicated prompt, allowing several terminal related features like returning to char moode.

@section Major-mode : texinfo

Texinfo has little add-ons to prompts : ``print'' prompt will offer to makeinfo or convert to pdf, and ``insert'' prompt to texinfo-insert...

@section Minor-mode : auto-complete

There isn't much to say. Auto-complete does integrate well, that's all!

@section Minor-mode : god-mode

God mode works but, is not binded. You would have to assign a key yourself to trigger god-mode.

@section Minor-mode : evil-mode

While nu-mode is not a modal editor, and aims at being the most efficient keymap, sometimes using lot of modifiers might still be harassing. Technically using vim keymap is feasible : you can activate evil-mode, then switch from evil-state to emacs-state as you want.

Either make VI normal-state use the nu-mode paddle.

@lisp
(define-key evil-normal-state-map (kbd "h") 'evil-insert)
(define-key evil-normal-state-map (kbd "j") 'evil-backward-char)
(define-key evil-normal-state-map (kbd "i") 'evil-previous-line)
(define-key evil-normal-state-map (kbd "k") 'evil-next-line)
@end lisp

Or, make nu-mode use the VI paddle.

However i would not recommend working like this. nu-mode is thought to work
in non-modal, modern editing. It does not need modes.

Using vanilla evil or spacemacs might be an alternative.

@section Other : autojump

autojump is part of the keybinding (Control f prompt).

@node Drawbacks & Limits
@chapter Drawbacks & Limits

@enumerate
@item There might be bugs on emacs-nu
@item Emacs-nu is meant for azerty, qwzerty. It would not be very good with other layouts
However the plan for other layouts might be simple. Control + key should stick to the mnemonic, like Ctrl+s to display save prompt.
While immediate keys like Alt+s or, obviously, the paddle Alt+i / Alt+j / Alt+k / Alt+l, should be transposed according to layout.
Control+h key to display Cheat Sheet, plus prompts, will help memorizing.

@end enumerate


@node Contributing
@chapter Contributing

Emacs nu is moving to a ``one file per feature'' style. There are files for common, core nu-mode, then files for integrating it.
For example there is a nu-isearch.el file, a nu-ibuffer.el file.
I do expect to isolate a file per mode.

@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include fdl-1.3.texi

@bye

@c Local Variables:
@c mode: texinfo
@c TeX-master: t
@c sentence-end-double-space: t
@c End:
