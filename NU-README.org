*Rationale*

Learning curves suck, having not to forget
memorized keymaps sucks, modal editing
is not necessarily compatible with your usage.
(And modal still requires some learning.)

An alternative to both learning curve
and modal editing is prompts.
These are keys displaying a <menu buffer>
(aka prompter), offering you
the features you need without effort.


-> Keys should be easy to learn, easy to press
-> Most common operations should be quick
-> Features should be easy to access
-> Remembering all of this should not be an issue.


You already know a lot of keys : 
- x : cut
- c : copy
- v : paste
- f, r : find, replace
- s, n, o : save, new, open
- w, q : close tab, quit
Why not using it? By the way this is also ErgoEmacs plan.

=> control keys will offer you prompters to select the right feature
   as you use nu-mode, reading prompt won't be useful
   {I could even consider, TODO, make prompts optional,
    either for a single prompt or globablly}
  
  For example with ^r, you can <replace> using regexp,
  delete stuff before one specific char, revert buffer,
  Capitalize a word, & much more....

=> There is more. C-z will undo using undo-tree.
   Also, ^c will copy selection or row. Same for ^x.
   There is a lot to find...

=> alt keys will offer you some speed:
   - a paddle to navigate with comfort
   - some magic.
   The plan is to document alt keys from prompts ;)
   Use control keys you already know,
   you will discover alt keys....

*.. welcome home to emacs-nu!*
This mode - essentially, a keymap - is made both for
intense text editing and casual usage
(emacs is not your only application, is it?)

<!> Note that emacs-nu does not respect any emacs convention <!>
    well at least, not voluntarily.

_I need to create a decent Info file to describe these keys deeper..._

* What is done

- The paddle to navigate,
- A good basic for the prompts.
- Use control-space to toggle mode-specific-map (i mean, C-c)


* TODO

Work on minibuffer or other modes,
Choose for alt d / ctrl d
Look at jumps/tags/marks
Scroll up / down

* on the technical side


** Things I currently use

- CUA
  Cua-selection-mode is used (note : alt-space to set mark)
  This includes rectangles.
  Cua-keys are _not_ used because of copy-row cut-row behaviour I wish.

- Undo-Tree

- Ace-jump will come soon.

** Things I looked at

I started looking at lot of stuff and coded some convenient,
bodhi-evil. And other trials. http://github.com/pyluyten/devil-mode

*** Paddle
ErgoEmacs ALT + i j k l is delicious.
It's really easy to learn.
Having words at u/o is just logical.


*** Evil-Mode
evil-mode brings something simple :
just do delete + right word, & here you are.
delete + delete => you killed a row
Do the same for copy.

We can of course apply this to paddle...
Everything that works with left car has to go throught to j.
To right word? o. You got it.

(Having multipliers is not done yet.)

*** God Mode
ErgoEmacs also looked at some GodMode principle :
press some magic, and you can repeat function keys
without their modifiers, like in vim normal mode.

But, this is where it's interesting, God Mode
do not have a distinct keymap for this.
Rather, it just avoid using Control.
(Alt can be emulated, too, but this needs a key-press...)
